defmodule Muhurta.Repo.Migrations.CreateEventsDomain do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:votes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :answer, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :poll_option_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :email, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:polls, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text
      add :location, :text
      add :has_time_option, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "polls_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:poll_options, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:votes) do
      modify :poll_option_id,
             references(:poll_options,
               column: :id,
               name: "votes_poll_option_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :user_id,
             references(:users,
               column: :id,
               name: "votes_user_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:poll_options) do
      add :date, :date, null: false
      add :from_time, :time
      add :to_time, :time

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :poll_id,
          references(:polls,
            column: :id,
            name: "poll_options_poll_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :body, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :poll_id,
          references(:polls,
            column: :id,
            name: "comments_poll_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :author_id,
          references(:users,
            column: :id,
            name: "comments_author_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:comments, "comments_poll_id_fkey")

    drop constraint(:comments, "comments_author_id_fkey")

    drop table(:comments)

    drop constraint(:poll_options, "poll_options_poll_id_fkey")

    alter table(:poll_options) do
      remove :poll_id
      remove :updated_at
      remove :inserted_at
      remove :to_time
      remove :from_time
      remove :date
    end

    drop constraint(:votes, "votes_poll_option_id_fkey")

    drop constraint(:votes, "votes_user_id_fkey")

    alter table(:votes) do
      modify :user_id, :uuid
      modify :poll_option_id, :uuid
    end

    drop table(:poll_options)

    drop constraint(:polls, "polls_user_id_fkey")

    drop table(:polls)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)

    drop table(:votes)
  end
end
